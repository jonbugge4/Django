DJ ANGO UNCHAINED 

-creating things on a web server

client side programming: Javascript, HTML5, CSS

Webpage --> Webserver --> Application Server --> Database

WEbpage --> Webserver is front end and writtenin Javascript, HTML5, and CSS
Application Server --> Database are backend and they are wrote in Java and Python
-------------------------------------------------------------------------------
Two types of request: Get Request, Post Request ******

Get Request; when a web page is loaded (stuff coming from the database)
Post Request: updates a database

Get Request goes downstream, from Database -----> Webpage
Post Request goes upstream from Webpage  -------> Database
---------------------------------------------------------------------------------

Both front end and backend are developed in Django


benefits: no need for local installs for each machine, no browser dependcenies, accessible from multiple platforms

Django is a server-side web framework
************************************************************************************
WE ARE CREATING A Learning Log -- an online journal system that lets you keep track of the infomration you've learned

models.py -- where we define all of our "tables" -- not tables, they are objects with attributes
views.py -- interacts with the HTML and the database
urls.py -- actual address location of the webpage location
templates--
************************************************
CODE 

pip install -r requirements.txt

django-admin startproject learning_log .

py manage.py migrate

py manage.py runserver

py manage.py startapp MainApp --> add MainApp to setting in log

IN MODELS:------------
class Topic(models.Model):
    text = models.CharField(max_length=200)
    date_added = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.text
----------------------------

py manage.py makemigrations

py manage.py migrate

py manage.py createsuperuser
username: admin
password: 1234 

inside admin.py
from .models import Topic

admin.site.register(Topic)

in the wepage add chess and rock climbing topics

in models
class Entry(models.Model):
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)
    text  = models.TextField()
    date_added = models.DateTimeField(auto_now_add=True)



When changes happen in models
step 1) Make make Migration 
step 2) migrate (admin.py)

WILL NEED DBSQLITE

import OS THEN import django

Views.py sets our associated views of each page and handles database
TWO TYPE OF REQUEST : GET AND Post-- cant seem to remember that one 


FOLDERS IN FOLDERS (MainApp --> templates)

TOPICS page
1) Make entry in urls page
2) defien topcis funtion in the views file
3) create topics template topics.html 

IN urls.py
path('topics',views.topics, name='topics')

IN views.py 
from .models import Topic

def topics(request):
    topics = Topic.objects.order_by('date_added')
    (- sign makes it desc)

    context = {'topics': topics}

key is the variable used in the template file 
and the value is the variable in the view files

    return render(request, 'MainApp/topics.html', context)


template tags - {% %}
template variables - {{  }}

IN topics.html (which we made)

{% extends "MainApp/base.html" %}

{% block content %}

<p>Topics</p>

<ul>
    {% for t in topics %}

    <li> {{ t }} </li>
    {% empty %}
    <li>No topics have been added yet.</li>
    {% endfor %}
</ul>

{% endblock content %}

MAKING INDIVIDUAL TOPIC PAGES

in URLS.py
path('topics/<int:topic_id>/', views.topic, name='topic')

in VEIWS
def topic(request, topic_id):
    topic = Topic.objects.get(id = topic_id)

    entries = topic.entry_set.all()

    context = {'topics': topics, 'entries':entries}

    return render(request, 'MainApp/topic.html', context)

in TOPIC.HTML (which we made)

{% extends "MainApp/base.html" %}

{% block content %}

<p>Topic: {{topic}}</p>

<ul>
    {% for e in entries %}
    <li>
        <p>{{e.text}}</p>
        <p>{{e.date_added}}</p>
    </li>
    {% empty %}
    <li>There are no entries</li>
</ul>

{% endblock content %}